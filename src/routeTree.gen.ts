/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as CasesRouteRouteImport } from './routes/cases/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CasesIndexRouteImport } from './routes/cases/index'
import { Route as CasesProductExampleRouteImport } from './routes/cases/product/example'
import { Route as CasesGameNiggaRouteImport } from './routes/cases/game/nigga'

const CasesRouteRoute = CasesRouteRouteImport.update({
  id: '/cases',
  path: '/cases',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CasesIndexRoute = CasesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CasesRouteRoute,
} as any)
const CasesProductExampleRoute = CasesProductExampleRouteImport.update({
  id: '/product/example',
  path: '/product/example',
  getParentRoute: () => CasesRouteRoute,
} as any)
const CasesGameNiggaRoute = CasesGameNiggaRouteImport.update({
  id: '/game/nigga',
  path: '/game/nigga',
  getParentRoute: () => CasesRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cases': typeof CasesRouteRouteWithChildren
  '/cases/': typeof CasesIndexRoute
  '/cases/game/nigga': typeof CasesGameNiggaRoute
  '/cases/product/example': typeof CasesProductExampleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cases': typeof CasesIndexRoute
  '/cases/game/nigga': typeof CasesGameNiggaRoute
  '/cases/product/example': typeof CasesProductExampleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cases': typeof CasesRouteRouteWithChildren
  '/cases/': typeof CasesIndexRoute
  '/cases/game/nigga': typeof CasesGameNiggaRoute
  '/cases/product/example': typeof CasesProductExampleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cases'
    | '/cases/'
    | '/cases/game/nigga'
    | '/cases/product/example'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cases' | '/cases/game/nigga' | '/cases/product/example'
  id:
    | '__root__'
    | '/'
    | '/cases'
    | '/cases/'
    | '/cases/game/nigga'
    | '/cases/product/example'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CasesRouteRoute: typeof CasesRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cases': {
      id: '/cases'
      path: '/cases'
      fullPath: '/cases'
      preLoaderRoute: typeof CasesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cases/': {
      id: '/cases/'
      path: '/'
      fullPath: '/cases/'
      preLoaderRoute: typeof CasesIndexRouteImport
      parentRoute: typeof CasesRouteRoute
    }
    '/cases/game/nigga': {
      id: '/cases/game/nigga'
      path: '/game/nigga'
      fullPath: '/cases/game/nigga'
      preLoaderRoute: typeof CasesGameNiggaRouteImport
      parentRoute: typeof CasesRouteRoute
    }
    '/cases/product/example': {
      id: '/cases/product/example'
      path: '/product/example'
      fullPath: '/cases/product/example'
      preLoaderRoute: typeof CasesProductExampleRouteImport
      parentRoute: typeof CasesRouteRoute
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/cases/route' {
  const createFileRoute: CreateFileRoute<
    '/cases',
    FileRoutesByPath['/cases']['parentRoute'],
    FileRoutesByPath['/cases']['id'],
    FileRoutesByPath['/cases']['path'],
    FileRoutesByPath['/cases']['fullPath']
  >
}
declare module './routes/cases/index' {
  const createFileRoute: CreateFileRoute<
    '/cases/',
    FileRoutesByPath['/cases/']['parentRoute'],
    FileRoutesByPath['/cases/']['id'],
    FileRoutesByPath['/cases/']['path'],
    FileRoutesByPath['/cases/']['fullPath']
  >
}
declare module './routes/cases/game/nigga' {
  const createFileRoute: CreateFileRoute<
    '/cases/game/nigga',
    FileRoutesByPath['/cases/game/nigga']['parentRoute'],
    FileRoutesByPath['/cases/game/nigga']['id'],
    FileRoutesByPath['/cases/game/nigga']['path'],
    FileRoutesByPath['/cases/game/nigga']['fullPath']
  >
}
declare module './routes/cases/product/example' {
  const createFileRoute: CreateFileRoute<
    '/cases/product/example',
    FileRoutesByPath['/cases/product/example']['parentRoute'],
    FileRoutesByPath['/cases/product/example']['id'],
    FileRoutesByPath['/cases/product/example']['path'],
    FileRoutesByPath['/cases/product/example']['fullPath']
  >
}

interface CasesRouteRouteChildren {
  CasesIndexRoute: typeof CasesIndexRoute
  CasesGameNiggaRoute: typeof CasesGameNiggaRoute
  CasesProductExampleRoute: typeof CasesProductExampleRoute
}

const CasesRouteRouteChildren: CasesRouteRouteChildren = {
  CasesIndexRoute: CasesIndexRoute,
  CasesGameNiggaRoute: CasesGameNiggaRoute,
  CasesProductExampleRoute: CasesProductExampleRoute,
}

const CasesRouteRouteWithChildren = CasesRouteRoute._addFileChildren(
  CasesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CasesRouteRoute: CasesRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
